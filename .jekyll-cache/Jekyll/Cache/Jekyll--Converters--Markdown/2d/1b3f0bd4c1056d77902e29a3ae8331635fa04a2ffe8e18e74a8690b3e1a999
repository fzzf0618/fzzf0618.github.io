I"&8<h3 id="引言">引言</h3>
<p>在工作上遇到了需要在后台集成<code class="highlighter-rouge">支付宝</code>和<code class="highlighter-rouge">微信</code>支付的扫码功能，在完成一系列的工作后，我觉得有必要总结和归纳一下。</p>

<h3 id="开头">开头</h3>
<p>首先，我要介绍一个生成二维码的<code class="highlighter-rouge">Gem</code>包，名字是<code class="highlighter-rouge">rqrcode</code>，具体文档可以看<a href="https://github.com/whomwah/rqrcode">这里</a>。这个gem包的主要作用是，在支付宝和微信支付回调返回二维码图片的链接时，将链接转化为base64的图片传给前端渲染。</p>

<h3 id="支付宝扫码">支付宝扫码</h3>
<p>进入<a href="https://open.alipay.com/platform/home.htm">支付宝开放平台</a>， 登录账号-&gt;开发接入-&gt;支付应用-&gt;接入应用。选择接入的应用然后点击详情-&gt;应用信息-&gt;开发设置。在这里，我们设置支付的回调，加密方式等等。支付宝提供了很方便的沙箱服务，我们可以先在沙箱环境中调试支付应用，然后在部署到生产环境。支付宝<a href="https://docs.open.alipay.com/200">api文档</a>可以在这里查看。在rails中，我接入了<code class="highlighter-rouge">Rei</code>写的gem<a href="https://github.com/chloerei/alipay">alipay</a>，具体文档可以去看看。</p>

<p>接下来就是创建生成订单的接口和回调的接口</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#lib/alipay_qr.rb</span>
<span class="k">class</span> <span class="nc">AlipayQR</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_order</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
      <span class="c1"># 建立一个客户端以便快速调用API</span>
      <span class="vi">@alipay_client</span> <span class="o">=</span> <span class="no">Alipay</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
        <span class="ss">url: </span><span class="no">CONFIG</span><span class="p">.</span><span class="nf">alipay_api_url</span><span class="p">,</span> <span class="c1">#在secret.yml中配置</span>
        <span class="ss">app_id: </span><span class="no">CONFIG</span><span class="p">.</span><span class="nf">alipay_appid</span><span class="p">,</span> <span class="c1">#在secret.yml中配置</span>
        <span class="ss">app_private_key: </span><span class="no">CONFIG</span><span class="p">.</span><span class="nf">alipay_app_private_key</span><span class="p">,</span> <span class="c1">#在secret.yml中配置</span>
        <span class="ss">alipay_public_key: </span><span class="no">CONFIG</span><span class="p">.</span><span class="nf">alipay_app_public_key</span> <span class="c1">#在secret.yml中配置</span>
      <span class="p">)</span>
      <span class="n">response</span> <span class="o">=</span> <span class="vi">@alipay_client</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span>
        <span class="ss">method: </span><span class="s1">'alipay.trade.precreate'</span><span class="p">,</span>
        <span class="ss">notify_url: </span><span class="no">CONFIG</span><span class="p">.</span><span class="nf">alipay_callback_url</span><span class="p">,</span>  <span class="c1">#在secret.yml中配置</span>
        <span class="ss">biz_content: </span><span class="p">{</span>
          <span class="ss">out_trade_no: </span><span class="n">options</span><span class="p">[</span><span class="ss">:order_id</span><span class="p">],</span>
          <span class="ss">total_amount: </span><span class="n">options</span><span class="p">[</span><span class="ss">:fee</span><span class="p">]</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span>
          <span class="ss">subject: </span><span class="n">options</span><span class="p">[</span><span class="ss">:plan_name</span><span class="p">],</span>
        <span class="p">}.</span><span class="nf">to_json</span><span class="p">(</span><span class="ss">ascii_only: </span><span class="kp">true</span><span class="p">),</span> <span class="c1"># to_json(ascii_only: true) is important!</span>
        <span class="ss">timestamp: </span><span class="no">Time</span><span class="p">.</span><span class="nf">now</span><span class="p">.</span><span class="nf">to_s</span><span class="p">(</span><span class="ss">:db</span><span class="p">)</span>
      <span class="p">)</span>
      <span class="c1"># 提取二维码地址</span>
      <span class="n">qr_code_url</span> <span class="o">=</span> <span class="no">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)[</span><span class="s2">"alipay_trade_precreate_response"</span><span class="p">][</span><span class="s2">"qr_code"</span><span class="p">]</span>
      <span class="c1"># 返回二维码链接</span>
      <span class="n">qr_code_url</span> 
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>
<p>接下来处理链接变成base64的图片</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vi">@payment_url</span> <span class="o">=</span> <span class="no">Qrcode</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">qr_code_url</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#lib/qrcode.rb</span>
<span class="k">class</span> <span class="nc">Qrcode</span>

  <span class="c1"># 根据url生成二维码图片</span>
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">build</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">if</span> <span class="n">url</span><span class="p">.</span><span class="nf">blank?</span>
    <span class="n">qr</span> <span class="o">=</span> <span class="no">RQRCode</span><span class="o">::</span><span class="no">QRCode</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">qr</span><span class="p">.</span><span class="nf">as_png</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">400</span><span class="p">).</span><span class="nf">to_data_url</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>
<p>用户扫完码支付完成之后回调配置的路径，获取所需要的参数，并存入数据库即可。</p>

<h3 id="微信扫码">微信扫码</h3>
<p>微信的文档需要吐槽一下，看着没有支付宝的清晰，并且基本上每次所做的操作都要扫码授权登录等等。沙箱环境的搭建也没有支付宝成熟。这里是微信的<a href="https://pay.weixin.qq.com/wiki/doc/api/index.html">开发文档</a>，如果有别的需求也可以上去看看。在rails中，我接入了<code class="highlighter-rouge">Jasl</code>写的gem<a href="https://github.com/jasl/wx_pay">wx_pay</a>。微信接口的接入会稍微麻烦一点，包含了开发者审核，应用审核，安全证书的安装，apiclient_cert的下载等等，完成一系列的配置之后，再来看看代码。</p>

<p>首先我们在<code class="highlighter-rouge">initialize</code>文件夹下初始化微信的配置</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#initialize/wxpay.rb</span>
<span class="no">WxPay</span><span class="p">.</span><span class="nf">appid</span> <span class="o">=</span> <span class="no">CONFIG</span><span class="p">.</span><span class="nf">wxpay_appid</span> <span class="c1">#在secret.yml中配置</span>
<span class="no">WxPay</span><span class="p">.</span><span class="nf">key</span> <span class="o">=</span> <span class="no">CONFIG</span><span class="p">.</span><span class="nf">wxpay_appkey</span> <span class="c1">#在secret.yml中配置</span>
<span class="no">WxPay</span><span class="p">.</span><span class="nf">mch_id</span> <span class="o">=</span> <span class="no">CONFIG</span><span class="p">.</span><span class="nf">wxpay_merchant_id</span> <span class="c1">#在secret.yml中配置</span>

<span class="c1">#下载的cert文件存放在settings文件夹下</span>
<span class="n">filepath</span> <span class="o">=</span> <span class="no">File</span><span class="p">.</span><span class="nf">expand_path</span><span class="p">(</span><span class="s1">'../../settings/apiclient_cert.p12'</span><span class="p">,</span> <span class="kp">__FILE__</span><span class="p">)</span>
<span class="no">WxPay</span><span class="p">.</span><span class="nf">set_apiclient_by_pkcs12</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">filepath</span><span class="p">),</span> <span class="no">WxPay</span><span class="p">.</span><span class="nf">mch_id</span><span class="p">)</span> <span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'RAILS_ENV'</span><span class="p">]</span> <span class="o">==</span> <span class="s1">'production'</span>

<span class="no">WxPay</span><span class="p">.</span><span class="nf">extra_rest_client_options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">timeout: </span><span class="mi">2</span><span class="p">,</span> <span class="ss">open_timeout: </span><span class="mi">3</span> <span class="p">}</span>
</code></pre></div></div>
<p>然后编写请求二维码的api</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#lib/wxpay_qr.rb</span>
<span class="k">class</span> <span class="nc">WxpayQR</span>
  
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_order</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
      <span class="ss">body: </span><span class="n">options</span><span class="p">[</span><span class="ss">:plan_name</span><span class="p">],</span>
      <span class="ss">out_trade_no: </span><span class="n">options</span><span class="p">[</span><span class="ss">:order_id</span><span class="p">],</span>
      <span class="ss">total_fee: </span><span class="n">options</span><span class="p">[</span><span class="ss">:fee</span><span class="p">],</span>
      <span class="ss">spbill_create_ip: </span><span class="n">options</span><span class="p">[</span><span class="ss">:real_ip</span><span class="p">],</span>
      <span class="ss">notify_url: </span><span class="no">CONFIG</span><span class="p">.</span><span class="nf">wxpay_notify_url</span><span class="p">,</span> <span class="c1">#微信异步操作callback</span>
      <span class="ss">trade_type: </span><span class="s1">'NATIVE'</span><span class="p">,</span> <span class="c1"># could be "MWEB", ""JSAPI", "NATIVE" or "APP", 如果不是扫码，一般是"JSAPI"</span>
    <span class="p">}</span>
    <span class="n">r</span> <span class="o">=</span> <span class="no">WxPay</span><span class="o">::</span><span class="no">Service</span><span class="p">.</span><span class="nf">invoke_unifiedorder</span> <span class="n">params</span>
    <span class="n">qrcode_url</span> <span class="o">=</span> <span class="n">r</span><span class="p">[</span><span class="s2">"code_url"</span><span class="p">]</span>
    <span class="n">qrcode_url</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div></div>
<p>这时同样我们调用</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vi">@payment_url</span> <span class="o">=</span> <span class="no">Qrcode</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">qr_code_url</span><span class="p">)</span>
</code></pre></div></div>
<p>返回base64图片，代码同支付宝。同样的，在客户微信支付扫码完成之后，微信会回调<code class="highlighter-rouge">notify_url</code>，在callback中我们来取微信回传的值。这里需要注意的是，微信的回调和支付宝回调不一样，微信的回调是<code class="highlighter-rouge">xml</code>文件，在取的时候，文档也给了我们例子：</p>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wxpay_callback</span>
    <span class="n">result</span> <span class="o">=</span> <span class="no">Hash</span><span class="p">.</span><span class="nf">from_xml</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">read</span><span class="p">)[</span><span class="s2">"xml"</span><span class="p">]</span>
    <span class="k">if</span> <span class="no">WxPay</span><span class="o">::</span><span class="no">Sign</span><span class="p">.</span><span class="nf">verify?</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
      <span class="c1">#你需要处理的具体内容</span>

      <span class="n">render</span> <span class="ss">plain: </span><span class="s1">'success'</span><span class="p">,</span> <span class="ss">layout: </span><span class="kp">false</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">plain: </span><span class="s1">'fail'</span><span class="p">,</span> <span class="ss">layout: </span><span class="kp">false</span>
    <span class="k">end</span>
  <span class="k">end</span>
</code></pre></div></div>
<h4 id="以上">以上。</h4>
:ET